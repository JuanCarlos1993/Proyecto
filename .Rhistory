return(x3)
}
}
anualidad(n = 15, i = 0.035, P = 5000, Vencida = FALSE)
cuadratica <- function(x) {
3 * x ^ 2 - 1 * x - 2
}
plot(cuadratica,
from = -2, to = 2,
xlab = "x", ylab = "f(x)",
n = 100,
col = "blue",
main = expression(paste("Gráfica de la función ",
3 * x ^ 2 - 1 * x - 2,
" utilizando 'plot'")
)
)
plot(cuadratica,
+      from = -2, to = 2,
+      xlab = "x", ylab = "f(x)",
+      n = 100,
+      col = "blue",
+      main = expression(paste("Gráfica de la función ",
+                              3 * x ^ 2 - 1 * x - 2,
+                              " utilizando 'plot'")
+      )
+ )
plot(cuadratica,
from = -2, to = 2,
xlab = "x", ylab = "f(x)",
n = 5,
col = "blue",
main = expression(paste("Gráfica de la función ",
3 * x ^ 2 - 1 * x - 2,
" utilizando 'plot'")
)
)
curve(cuadratica,
from = -2, to = 2,
xlab = "x", ylab = "f(x)",
n = 100,
col = "red",
main = expression(paste("Gráfica de la función ",
3 * x ^ 2 - 1 * x - 2,
" utilizando 'curve'")
)
)
soluciones <- data.frame(x = c(- 2 / 3, 1),
y = c(0, 0),
etiqueta = c("sol. 1", "sol. 2"))
points(soluciones$x, soluciones$y, col = "blue")
text(soluciones$x, soluciones$y + 0.5 , soluciones$etiqueta)
library(datasets)
data(cars)
config.default <- par()
par(pch = 19, lty = "dashed")
config.default <- par() # Guardamos la configuración inicial.
# col y fg se superponen.
par(col = "blue", fg = "green", bg = gray(0.8))
plot(cars$speed, cars$dist)
plot(cars$speed, cars$dist, col = "blue")
plot(cars$speed, cars$dist, col = "blue", fg = "red")
boxplot(cars$speed)
par(config.default) # Establecemos la configuración inicial.
config.default <- par() # Guardamos la configuración inicial.
# col y fg se superponen.
par(col = "blue", fg = "green", bg = gray(0.8))
plot(cars$speed, cars$dist)
plot(cars$speed, cars$dist, col = "blue")
plot(cars$speed, cars$dist, col = "blue", fg = "red")
boxplot(cars$speed)
par(config.default) # Establecemos la configuración inicial.
config.default <- par() # Guardamos la configuración inicial.
# col y fg se superponen.
par(col = "blue", fg = "green", bg = gray(0.8))
plot(cars$speed, cars$dist)
plot(cars$speed, cars$dist, col = "blue")
plot(cars$speed, cars$dist, col = "blue", fg = "red")
boxplot(cars$speed)
anualidad <- function(n,i,P=1,Vencida=TRUE){
s <- 0
for(j in 1:n){
x1 <- ((1/(1+i))^j)
s <- x1+s
}
x2 <- P*s
round(x2,3)
if(Vencida==TRUE){
return(x2)
} else{
x3 <- x2*(1+i)
return(x3)
}
}
## Ejemplos
anualidad(n = 15, i = 0.035)
config.default <- par() # Guardamos la configuración inicial.
par(lty = "dotted", lwd = 2)
plot(cars$speed, cars$dist); abline(a = 0, b = 1)
par(lty = "dashed", lwd = 3)
plot(cars$speed, cars$dist); abline(a = 0, b = 1)
par(config.default) # Establecemos la configuración inicial.
config.default <- par() # Guardamos la configuración inicial.
par(lty = "dotted", lwd = 2)
plot(cars$speed, cars$dist); abline(a = 0, b = 1)
par(lty = "dashed", lwd = 3)
plot(cars$speed, cars$dist); abline(a = 0, b = 1)
par(config.default) # Establecemos la configuración inicial.
config.default <- par() # Guardamos la configuración inicial.
par(ps = 9, cex = 1.2)
plot(cars$speed, cars$dist); abline(a = 0, b = 1)
par(ps = 9, cex = 2)
plot(cars$speed, cars$dist); abline(a = 0, b = 1)
par(ps = 5, cex = 2)
plot(cars$speed, cars$dist); abline(a = 0, b = 1)
par(ps = 7, cex = 2)
plot(cars$speed, cars$dist); abline(a = 0, b = 1)
par(config.default)
config.default <- par() # Guardamos la configuración inicial.
par(ps = 9, cex = 1.2)
plot(cars$speed, cars$dist); abline(a = 0, b = 1)
par(ps = 9, cex = 2)
plot(cars$speed, cars$dist); abline(a = 0, b = 1)
par(ps = 5, cex = 2)
plot(cars$speed, cars$dist); abline(a = 0, b = 1)
par(ps = 7, cex = 2)
plot(cars$speed, cars$dist); abline(a = 0, b = 1)
config.default <- par() # Guardamos la configuración inicial.
par(family = "Calibri", font = 2)
plot(cars$speed, cars$dist, pch = "X", main = "Calibri y bold (sólo puntos)")
par(family = "serif", font = 3)
plot(cars$speed, cars$dist, pch = "X", main = "serif y italic (sólo puntos)")
par(config.default)
config.default <- par() # Guardamos la configuración inicial.
x <- -5:5
y <- -x ^ 2 + 25
par(pch = 1); plot(x, y)
par(pch = 19); plot(x, y)
# Del 21 al 25 puede especificarse la línea y el borde del símbolo.
par(pch = 21); plot(x, y, bg = "blue", col = "red")
# Con caracteres.
par(pch = "a"); plot(x, y)
par(pch = "@"); plot(x, y)
par(config.default)
config.default <- par() # Guardamos la configuración inicial.
x <- -5:5
y <- -x ^ 2 + 25
par(config.default) # Establecemos la configuración inicial.
plot(x, y)
par(mar = c(0,0,0,0)); plot(x, y) # Eliminamos los márgenes de la figura.
par(config.default) # Establecemos la configuración inicial.
plot(x, y)
par(pin = c(9, 4.5)); plot(x, y) # Cambiamos el ancho y altura de la región gráfica.
par(config.default) # Establecemos la configuración inicial.
plot(x, y)
par(oma = c(1, 1, 1, 1)); plot(x, y)
config.default <- par() # Guardamos la configuración inicial.
x <- -5:5
y <- -x ^ 2 + 25
par(config.default) # Establecemos la configuración inicial.
plot(x, y)
par(mar = c(0,0,0,0)); plot(x, y) # Eliminamos los márgenes de la figura.
par(config.default) # Establecemos la configuración inicial.
plot(x, y)
par(pin = c(9, 4.5)); plot(x, y) # Cambiamos el ancho y altura de la región gráfica.
par(config.default) # Establecemos la configuración inicial.
plot(x, y)
par(oma = c(1, 1, 1, 1)); plot(x, y)
?plotmath
?trianle.plot
?triangle.plot
install.packages("ade4 ")
2+5
5*4
duplicados.faltantes <- data.frame(nombre = c("Fernando", "José", "José"),
edad = c(20, NA, NA),
sexo = c("M", "M", "M"),
c.u. = c(NA, "90", "90"))
> duplicados.faltantes
nombre edad sexo c.u.
1 Fernando   20    M <NA>
2     José   NA    M   90
3     José   NA    M   90
> sum(is.na(duplicados.faltantes)) # 1.
[1] 3
> mean(is.na(duplicados.faltantes)) # 2.
[1] 0.25
> sapply(duplicados.faltantes, function(x) {mean(is.na(x))}) # 3.
nombre      edad      sexo      c.u.
0.0000000 0.6666667 0.0000000 0.3333333
> sum(duplicated(duplicados.faltantes)) # 4.
[1] 1
> mean(duplicated(duplicados.faltantes)) # 5.
[1] 0.3333333
duplicados.faltantes <- data.frame(nombre = c("Fernando", "José", "José"),
edad = c(20, NA, NA),
sexo = c("M", "M", "M"),
c.u. = c(NA, "90", "90"))
duplicados.faltantes
nombre edad sexo c.u.
1 Fernando   20    M <NA>
2     José   NA    M   90
3     José   NA    M   90
sum(is.na(duplicados.faltantes)) # 1.
[1] 3
mean(is.na(duplicados.faltantes)) # 2.
[1] 0.25
sapply(duplicados.faltantes, function(x) {mean(is.na(x))}) # 3.
nombre      edad      sexo      c.u.
0.0000000 0.6666667 0.0000000 0.3333333
?duplicated
if (sum(rownames(installed.packages()) == "ggplot2") == 0) install.packages("ggplot2")
library(ggplot2)
data(diamonds)
ggplot(data = diamonds, aes(x = carat, y = x * y * z)) +
geom_point(size = 3, color = "blue") +
labs(title = "Se encontraron 2 valores atípicos validando el peso vs el volumen en la base de datos 'diamantes'",
x = "Peso",
y = "Volumen")
diamonds
diamonds
diamonds
View(diamonds)
diamonds[,2]
str(diamonds)
ggplot(data = diamonds, aes(x = carat, y = x * y * z))
ggplot(data = diamonds, aes(x = carat, y = x * y * z)) +geom_blank
ggplot(data = diamonds, aes(x = carat, y = x * y * z)) +geom_histogram()
ggplot(data = diamonds, aes(x = carat)) +geom_histogram()
ggplot(data = diamonds, aes(x = carat)) +geom_histogram()
ggplot(data = diamonds, aes(x = carat, y = x * y * z)) +geom_point(aes(size = price)) +geom_line()
ggplot(data = diamonds, aes(x = carat, y = x * y * z)) +geom_point(aes(size = price)) +geom_line()+geom_color()
chr [1:35]
?dgeom
x <- dgeom(.2)
x <- rgeom(100,.2)
plot(x)
x <- seq(-4, 4, length=100)
hx <- dnorm(x)
plot(x, hx, type="l", lty=2, xlab="x value",
ylab="Density", main="Comparison of t Distributions")
x <- seq(0,10, length=100)
hx <- dgeom(x)
?dnorm
?dgeom
hx <- dgeom(x,.5)
x <- seq(0,10, length=100)
x <- seq(0,10)
hx <- dgeom(x,.5)
plot(x,hx)
plot(x, hx, type="l", lty=2, xlab="x value",
+      ylab="Density", main="Comparison of t Distributions")
plot(x, hx, type="l", lty=2, xlab="x value",
ylab="Density", main="Comparison of t Distributions")
?plot
?seq
?lines
?ggplot
library(ggplot2)
?ggplot2
?ggplot
?plot
?attach
head(temblores)
source('~/.active-rstudio-document', echo=TRUE)
set.seed(20141015)
n <- 10000  # Tama–o de la muestra.
m <- 10000  # Nœmero de muestras.
# Par‡metros de la distribuci—n gamma.
alpha <- 2
lambda <- 10
media <- alpha / lambda
varianza <- alpha / lambda ^ 2
# Generamos las muestras.
muestras <- list()
?rgamma
muestras
for(i in 1:m) {
muestras[[i]] <- rgamma(n, shape = alpha, rate = lambda)
}
muestras[[1]]
par(mfrow = c(1, 1), las = 1)
# Gr‡fica de la distribuci—n de X.
hist(muestras[[1]],
100,
freq = FALSE,
col = gray(0.8),
border = "white",
main = expression(paste("Distribuci—n de X")),
xlab = "X", ylab = "f(X)"
)
lines(seq(0, 1.3, length.out = 10000),
dgamma(seq(0, 1.3, length.out = 10000), shape = alpha, rate = lambda),
col = "blue")
hist(sapply(muestras, mean),
sapply(muestras, mean)
par(mfrow = c(1, 2), las = 1)
# Gr‡fica de la distribuci—n de X.
par(mfrow = c(1, 2), las = 1)
# Gr‡fica de la distribuci—n de X.
hist(muestras[[1]],
100,
freq = FALSE,
col = gray(0.8),
border = "white",
main = expression(paste("Distribuci—n de X")),
xlab = "X", ylab = "f(X)"
)
lines(seq(0, 1.3, length.out = 10000),
dgamma(seq(0, 1.3, length.out = 10000), shape = alpha, rate = lambda),
col = "blue")
# Gr‡fica de la distribuci—n muestral de la muestra.
par(mfrow = c(1, 1), las = 1)
# Gr‡fica de la distribuci—n de X.
hist(muestras[[1]],
100,
freq = FALSE,
col = gray(0.8),
border = "white",
main = expression(paste("Distribuci—n de X")),
xlab = "X", ylab = "f(X)"
)
lines(seq(0, 1.3, length.out = 10000),
dgamma(seq(0, 1.3, length.out = 10000), shape = alpha, rate = lambda),
col = "blue")
# Gr‡fica de la distribuci—n muestral de la muestra.
par(mfrow = c(2, 2), las = 1)
# Gr‡fica de la distribuci—n de X.
hist(muestras[[1]],
100,
freq = FALSE,
col = gray(0.8),
border = "white",
main = expression(paste("Distribuci—n de X")),
xlab = "X", ylab = "f(X)"
)
lines(seq(0, 1.3, length.out = 10000),
dgamma(seq(0, 1.3, length.out = 10000), shape = alpha, rate = lambda),
col = "blue")
# Gr‡fica de la distribuci—n muestral de la muestra.
hist(sapply(muestras, mean),
100,
freq = FALSE,
col = gray(0.8),
border = "white",
main = expression(paste("Distribuci—n muestral de ",
bar(X[n]))
),
xlab = expression(bar(X[n])), ylab = expression(paste("f(", bar(X[n]), ")"))
)
lines(seq(0.194, 0.205, length.out = 10000),
dnorm(seq(0.194, 0.205, length.out = 10000), mean = media, sd = sqrt(varianza / n)),
col = "blue")
abline(v = media, col = "red")
# Podemos estimar la media y varianza de la distribuci—n.
par(mfrow = c(2, 1), las = 1)
# Gr‡fica de la distribuci—n de X.
hist(muestras[[1]],
100,
freq = FALSE,
col = gray(0.8),
border = "white",
main = expression(paste("Distribuci—n de X")),
xlab = "X", ylab = "f(X)"
)
lines(seq(0, 1.3, length.out = 10000),
dgamma(seq(0, 1.3, length.out = 10000), shape = alpha, rate = lambda),
col = "blue")
# Gr‡fica de la distribuci—n muestral de la muestra.
hist(sapply(muestras, mean),
100,
freq = FALSE,
col = gray(0.8),
border = "white",
main = expression(paste("Distribuci—n muestral de ",
bar(X[n]))
),
xlab = expression(bar(X[n])), ylab = expression(paste("f(", bar(X[n]), ")"))
)
lines(seq(0.194, 0.205, length.out = 10000),
dnorm(seq(0.194, 0.205, length.out = 10000), mean = media, sd = sqrt(varianza / n)),
col = "blue")
abline(v = media, col = "red")
# Podemos estimar la media y varianza de la distribuci—n.
mean(sapply(muestras, mean))
var(sapply(muestras, mean)) * n
set.seed(20141015)
n <- 100  # Tama–o de la muestra.
m <- 100  # Nœmero de muestras.
# Par‡metros de la distribuci—n gamma.
alpha <- 2
lambda <- 10
media <- alpha / lambda
varianza <- alpha / lambda ^ 2
# Generamos las muestras.
muestras <- list()
for(i in 1:m) {
muestras[[i]] <- rgamma(n, shape = alpha, rate = lambda)
}
par(mfrow = c(2, 1), las = 1)
# Gr‡fica de la distribuci—n de X.
hist(muestras[[1]],
100,
freq = FALSE,
col = gray(0.8),
border = "white",
main = expression(paste("Distribuci—n de X")),
xlab = "X", ylab = "f(X)"
)
lines(seq(0, 1.3, length.out = 10000),
dgamma(seq(0, 1.3, length.out = 10000), shape = alpha, rate = lambda),
col = "blue")
# Gr‡fica de la distribuci—n muestral de la muestra.
hist(sapply(muestras, mean),
100,
freq = FALSE,
col = gray(0.8),
border = "white",
main = expression(paste("Distribuci—n muestral de ",
bar(X[n]))
),
xlab = expression(bar(X[n])), ylab = expression(paste("f(", bar(X[n]), ")"))
)
lines(seq(0.194, 0.205, length.out = 10000),
dnorm(seq(0.194, 0.205, length.out = 10000), mean = media, sd = sqrt(varianza / n)),
col = "blue")
abline(v = media, col = "red")
# Podemos estimar la media y varianza de la distribuci—n.
mean(sapply(muestras, mean))
var(sapply(muestras, mean)) * n
set.seed(20141015)
n <- 10  # Tama–o de la muestra.
m <- 10  # Nœmero de muestras.
# Par‡metros de la distribuci—n gamma.
alpha <- 2
lambda <- 10
media <- alpha / lambda
varianza <- alpha / lambda ^ 2
# Generamos las muestras.
muestras <- list()
for(i in 1:m) {
muestras[[i]] <- rgamma(n, shape = alpha, rate = lambda)
}
par(mfrow = c(2, 1), las = 1)
# Gr‡fica de la distribuci—n de X.
hist(muestras[[1]],
100,
freq = FALSE,
col = gray(0.8),
border = "white",
main = expression(paste("Distribuci—n de X")),
xlab = "X", ylab = "f(X)"
)
lines(seq(0, 1.3, length.out = 10000),
dgamma(seq(0, 1.3, length.out = 10000), shape = alpha, rate = lambda),
col = "blue")
# Gr‡fica de la distribuci—n muestral de la muestra.
hist(sapply(muestras, mean),
100,
freq = FALSE,
col = gray(0.8),
border = "white",
main = expression(paste("Distribuci—n muestral de ",
bar(X[n]))
),
xlab = expression(bar(X[n])), ylab = expression(paste("f(", bar(X[n]), ")"))
)
lines(seq(0.194, 0.205, length.out = 10000),
dnorm(seq(0.194, 0.205, length.out = 10000), mean = media, sd = sqrt(varianza / n)),
col = "blue")
abline(v = media, col = "red")
# Podemos estimar la media y varianza de la distribuci—n.
mean(sapply(muestras, mean))
var(sapply(muestras, mean)) * n
install.packages("plotrix")
set.seed(20141015)
n <- 600  # Tama–o de la muestra.
m <- 100  # Nœmero de muestras.
# Varianza conocida.
varianza <- .25
# Funci—n que calcula el intervalo de confianza.
intervalo.confianza.95 <- function(datos) {
n <- length(datos)
media <- mean(datos)
error.estandar <- sqrt(varianza / n)
z <- qnorm(.975)
c(media - error.estandar * z, media + error.estandar * z)
}
# Funci—n que regresa el color del intervalo dependiendo si contiene al par‡metro muestral.
indicador.color <- function(intervalo, parametro.poblacional) {
if(parametro.poblacional < intervalo[1] | parametro.poblacional > intervalo[2]) "red" else "black"
}
# Generamos las muestras, las medias, los intervalos de confianza y los colores del intervalo.
muestras <- replicate(m, rnorm(n, mean = 100, sd = sqrt(varianza)))
medias <- apply(muestras, 2, mean)
intervalos <- apply(muestras, 2, intervalo.confianza.95)
color.intervalos <- apply(intervalos, 2, indicador.color, 100)
# Graficamos los intervalos con base a su contenido.
library(plotrix)
par(mfrow = c(1,1))
plotCI(x = 1:m, y = medias,
li = intervalos[1, ], ui = intervalos[2, ],
col = color.intervalos, lwd = 1, pch = 19,
ylim = c(99.88, 100.12),
xlab = "Nœmero de muestra",
ylab = "Intervalo",
main = "Intervalos de confianza al 95% para la media de una muestra normal con varianza conocida")
abline(h = 100, lwd = 2, col = "blue", lty = "dotted")
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
