install.packages("ade4 ")
2+5
5*4
duplicados.faltantes <- data.frame(nombre = c("Fernando", "José", "José"),
edad = c(20, NA, NA),
sexo = c("M", "M", "M"),
c.u. = c(NA, "90", "90"))
> duplicados.faltantes
nombre edad sexo c.u.
1 Fernando   20    M <NA>
2     José   NA    M   90
3     José   NA    M   90
> sum(is.na(duplicados.faltantes)) # 1.
[1] 3
> mean(is.na(duplicados.faltantes)) # 2.
[1] 0.25
> sapply(duplicados.faltantes, function(x) {mean(is.na(x))}) # 3.
nombre      edad      sexo      c.u.
0.0000000 0.6666667 0.0000000 0.3333333
> sum(duplicated(duplicados.faltantes)) # 4.
[1] 1
> mean(duplicated(duplicados.faltantes)) # 5.
[1] 0.3333333
duplicados.faltantes <- data.frame(nombre = c("Fernando", "José", "José"),
edad = c(20, NA, NA),
sexo = c("M", "M", "M"),
c.u. = c(NA, "90", "90"))
duplicados.faltantes
nombre edad sexo c.u.
1 Fernando   20    M <NA>
2     José   NA    M   90
3     José   NA    M   90
sum(is.na(duplicados.faltantes)) # 1.
[1] 3
mean(is.na(duplicados.faltantes)) # 2.
[1] 0.25
sapply(duplicados.faltantes, function(x) {mean(is.na(x))}) # 3.
nombre      edad      sexo      c.u.
0.0000000 0.6666667 0.0000000 0.3333333
?duplicated
if (sum(rownames(installed.packages()) == "ggplot2") == 0) install.packages("ggplot2")
library(ggplot2)
data(diamonds)
ggplot(data = diamonds, aes(x = carat, y = x * y * z)) +
geom_point(size = 3, color = "blue") +
labs(title = "Se encontraron 2 valores atípicos validando el peso vs el volumen en la base de datos 'diamantes'",
x = "Peso",
y = "Volumen")
diamonds
diamonds
diamonds
View(diamonds)
diamonds[,2]
str(diamonds)
ggplot(data = diamonds, aes(x = carat, y = x * y * z))
ggplot(data = diamonds, aes(x = carat, y = x * y * z)) +geom_blank
ggplot(data = diamonds, aes(x = carat, y = x * y * z)) +geom_histogram()
ggplot(data = diamonds, aes(x = carat)) +geom_histogram()
ggplot(data = diamonds, aes(x = carat)) +geom_histogram()
ggplot(data = diamonds, aes(x = carat, y = x * y * z)) +geom_point(aes(size = price)) +geom_line()
ggplot(data = diamonds, aes(x = carat, y = x * y * z)) +geom_point(aes(size = price)) +geom_line()+geom_color()
chr [1:35]
?dgeom
x <- dgeom(.2)
x <- rgeom(100,.2)
plot(x)
x <- seq(-4, 4, length=100)
hx <- dnorm(x)
plot(x, hx, type="l", lty=2, xlab="x value",
ylab="Density", main="Comparison of t Distributions")
x <- seq(0,10, length=100)
hx <- dgeom(x)
?dnorm
?dgeom
hx <- dgeom(x,.5)
x <- seq(0,10, length=100)
x <- seq(0,10)
hx <- dgeom(x,.5)
plot(x,hx)
plot(x, hx, type="l", lty=2, xlab="x value",
+      ylab="Density", main="Comparison of t Distributions")
plot(x, hx, type="l", lty=2, xlab="x value",
ylab="Density", main="Comparison of t Distributions")
?plot
?seq
?lines
?ggplot
library(ggplot2)
?ggplot2
?ggplot
?plot
?attach
head(temblores)
source('~/.active-rstudio-document', echo=TRUE)
set.seed(20141015)
n <- 10000  # Tama–o de la muestra.
m <- 10000  # Nœmero de muestras.
# Par‡metros de la distribuci—n gamma.
alpha <- 2
lambda <- 10
media <- alpha / lambda
varianza <- alpha / lambda ^ 2
# Generamos las muestras.
muestras <- list()
?rgamma
muestras
for(i in 1:m) {
muestras[[i]] <- rgamma(n, shape = alpha, rate = lambda)
}
muestras[[1]]
par(mfrow = c(1, 1), las = 1)
# Gr‡fica de la distribuci—n de X.
hist(muestras[[1]],
100,
freq = FALSE,
col = gray(0.8),
border = "white",
main = expression(paste("Distribuci—n de X")),
xlab = "X", ylab = "f(X)"
)
lines(seq(0, 1.3, length.out = 10000),
dgamma(seq(0, 1.3, length.out = 10000), shape = alpha, rate = lambda),
col = "blue")
hist(sapply(muestras, mean),
sapply(muestras, mean)
par(mfrow = c(1, 2), las = 1)
# Gr‡fica de la distribuci—n de X.
par(mfrow = c(1, 2), las = 1)
# Gr‡fica de la distribuci—n de X.
hist(muestras[[1]],
100,
freq = FALSE,
col = gray(0.8),
border = "white",
main = expression(paste("Distribuci—n de X")),
xlab = "X", ylab = "f(X)"
)
lines(seq(0, 1.3, length.out = 10000),
dgamma(seq(0, 1.3, length.out = 10000), shape = alpha, rate = lambda),
col = "blue")
# Gr‡fica de la distribuci—n muestral de la muestra.
par(mfrow = c(1, 1), las = 1)
# Gr‡fica de la distribuci—n de X.
hist(muestras[[1]],
100,
freq = FALSE,
col = gray(0.8),
border = "white",
main = expression(paste("Distribuci—n de X")),
xlab = "X", ylab = "f(X)"
)
lines(seq(0, 1.3, length.out = 10000),
dgamma(seq(0, 1.3, length.out = 10000), shape = alpha, rate = lambda),
col = "blue")
# Gr‡fica de la distribuci—n muestral de la muestra.
par(mfrow = c(2, 2), las = 1)
# Gr‡fica de la distribuci—n de X.
hist(muestras[[1]],
100,
freq = FALSE,
col = gray(0.8),
border = "white",
main = expression(paste("Distribuci—n de X")),
xlab = "X", ylab = "f(X)"
)
lines(seq(0, 1.3, length.out = 10000),
dgamma(seq(0, 1.3, length.out = 10000), shape = alpha, rate = lambda),
col = "blue")
# Gr‡fica de la distribuci—n muestral de la muestra.
hist(sapply(muestras, mean),
100,
freq = FALSE,
col = gray(0.8),
border = "white",
main = expression(paste("Distribuci—n muestral de ",
bar(X[n]))
),
xlab = expression(bar(X[n])), ylab = expression(paste("f(", bar(X[n]), ")"))
)
lines(seq(0.194, 0.205, length.out = 10000),
dnorm(seq(0.194, 0.205, length.out = 10000), mean = media, sd = sqrt(varianza / n)),
col = "blue")
abline(v = media, col = "red")
# Podemos estimar la media y varianza de la distribuci—n.
par(mfrow = c(2, 1), las = 1)
# Gr‡fica de la distribuci—n de X.
hist(muestras[[1]],
100,
freq = FALSE,
col = gray(0.8),
border = "white",
main = expression(paste("Distribuci—n de X")),
xlab = "X", ylab = "f(X)"
)
lines(seq(0, 1.3, length.out = 10000),
dgamma(seq(0, 1.3, length.out = 10000), shape = alpha, rate = lambda),
col = "blue")
# Gr‡fica de la distribuci—n muestral de la muestra.
hist(sapply(muestras, mean),
100,
freq = FALSE,
col = gray(0.8),
border = "white",
main = expression(paste("Distribuci—n muestral de ",
bar(X[n]))
),
xlab = expression(bar(X[n])), ylab = expression(paste("f(", bar(X[n]), ")"))
)
lines(seq(0.194, 0.205, length.out = 10000),
dnorm(seq(0.194, 0.205, length.out = 10000), mean = media, sd = sqrt(varianza / n)),
col = "blue")
abline(v = media, col = "red")
# Podemos estimar la media y varianza de la distribuci—n.
mean(sapply(muestras, mean))
var(sapply(muestras, mean)) * n
set.seed(20141015)
n <- 100  # Tama–o de la muestra.
m <- 100  # Nœmero de muestras.
# Par‡metros de la distribuci—n gamma.
alpha <- 2
lambda <- 10
media <- alpha / lambda
varianza <- alpha / lambda ^ 2
# Generamos las muestras.
muestras <- list()
for(i in 1:m) {
muestras[[i]] <- rgamma(n, shape = alpha, rate = lambda)
}
par(mfrow = c(2, 1), las = 1)
# Gr‡fica de la distribuci—n de X.
hist(muestras[[1]],
100,
freq = FALSE,
col = gray(0.8),
border = "white",
main = expression(paste("Distribuci—n de X")),
xlab = "X", ylab = "f(X)"
)
lines(seq(0, 1.3, length.out = 10000),
dgamma(seq(0, 1.3, length.out = 10000), shape = alpha, rate = lambda),
col = "blue")
# Gr‡fica de la distribuci—n muestral de la muestra.
hist(sapply(muestras, mean),
100,
freq = FALSE,
col = gray(0.8),
border = "white",
main = expression(paste("Distribuci—n muestral de ",
bar(X[n]))
),
xlab = expression(bar(X[n])), ylab = expression(paste("f(", bar(X[n]), ")"))
)
lines(seq(0.194, 0.205, length.out = 10000),
dnorm(seq(0.194, 0.205, length.out = 10000), mean = media, sd = sqrt(varianza / n)),
col = "blue")
abline(v = media, col = "red")
# Podemos estimar la media y varianza de la distribuci—n.
mean(sapply(muestras, mean))
var(sapply(muestras, mean)) * n
set.seed(20141015)
n <- 10  # Tama–o de la muestra.
m <- 10  # Nœmero de muestras.
# Par‡metros de la distribuci—n gamma.
alpha <- 2
lambda <- 10
media <- alpha / lambda
varianza <- alpha / lambda ^ 2
# Generamos las muestras.
muestras <- list()
for(i in 1:m) {
muestras[[i]] <- rgamma(n, shape = alpha, rate = lambda)
}
par(mfrow = c(2, 1), las = 1)
# Gr‡fica de la distribuci—n de X.
hist(muestras[[1]],
100,
freq = FALSE,
col = gray(0.8),
border = "white",
main = expression(paste("Distribuci—n de X")),
xlab = "X", ylab = "f(X)"
)
lines(seq(0, 1.3, length.out = 10000),
dgamma(seq(0, 1.3, length.out = 10000), shape = alpha, rate = lambda),
col = "blue")
# Gr‡fica de la distribuci—n muestral de la muestra.
hist(sapply(muestras, mean),
100,
freq = FALSE,
col = gray(0.8),
border = "white",
main = expression(paste("Distribuci—n muestral de ",
bar(X[n]))
),
xlab = expression(bar(X[n])), ylab = expression(paste("f(", bar(X[n]), ")"))
)
lines(seq(0.194, 0.205, length.out = 10000),
dnorm(seq(0.194, 0.205, length.out = 10000), mean = media, sd = sqrt(varianza / n)),
col = "blue")
abline(v = media, col = "red")
# Podemos estimar la media y varianza de la distribuci—n.
mean(sapply(muestras, mean))
var(sapply(muestras, mean)) * n
install.packages("plotrix")
set.seed(20141015)
n <- 600  # Tama–o de la muestra.
m <- 100  # Nœmero de muestras.
# Varianza conocida.
varianza <- .25
# Funci—n que calcula el intervalo de confianza.
intervalo.confianza.95 <- function(datos) {
n <- length(datos)
media <- mean(datos)
error.estandar <- sqrt(varianza / n)
z <- qnorm(.975)
c(media - error.estandar * z, media + error.estandar * z)
}
# Funci—n que regresa el color del intervalo dependiendo si contiene al par‡metro muestral.
indicador.color <- function(intervalo, parametro.poblacional) {
if(parametro.poblacional < intervalo[1] | parametro.poblacional > intervalo[2]) "red" else "black"
}
# Generamos las muestras, las medias, los intervalos de confianza y los colores del intervalo.
muestras <- replicate(m, rnorm(n, mean = 100, sd = sqrt(varianza)))
medias <- apply(muestras, 2, mean)
intervalos <- apply(muestras, 2, intervalo.confianza.95)
color.intervalos <- apply(intervalos, 2, indicador.color, 100)
# Graficamos los intervalos con base a su contenido.
library(plotrix)
par(mfrow = c(1,1))
plotCI(x = 1:m, y = medias,
li = intervalos[1, ], ui = intervalos[2, ],
col = color.intervalos, lwd = 1, pch = 19,
ylim = c(99.88, 100.12),
xlab = "Nœmero de muestra",
ylab = "Intervalo",
main = "Intervalos de confianza al 95% para la media de una muestra normal con varianza conocida")
abline(h = 100, lwd = 2, col = "blue", lty = "dotted")
directorio <- "/Users/jcdf_resident/Documents/ITAM/Estadística Aplicada I/Proyecto/DATOS/BRUTOS"
library(knitr)
directorio <- "/Users/jcdf_resident/Documents/ITAM/Estadística Aplicada I/Proyecto/DATOS/BRUTOS"
setwd(directorio)
knitr::opts_knit$set(root.dir = directorio)
knitr::opts_chunk$set(fig.path = "FIGURAS/Figuras_", fig.align = 'center',
fig.width = 12, fig.height = 8,
cache.path = "CACHE/Cache_", cache = TRUE,
eval = TRUE,
warning = FALSE, message = FALSE,
echo = TRUE,
comment = NA)
install.packages("knitr")
install.packages("knitr")
install.packages("plyr")
install.packages("ggplot2")
install.packages("ggthemes")
install.packages("reshape2")
```
```{r Lectura de datos}
library(plyr)
mes <- NULL
for (i in 1:11){
mes[[i]] <- read.csv(paste("./MES/", i+2002,"G.csv",sep=""),sep=",", header= TRUE,stringsAsFactors=TRUE)
mes[[i]]$ano <- as.numeric(2002+i)
mes[[i]]$tipo <- "General"
}
for (i in 12:22){
mes[[i]] <- read.csv(paste("./MES/", i+1991,"H.csv",sep=""),sep=",", header= TRUE,stringsAsFactors=TRUE)
mes[[i]]$ano <- as.numeric(1991+i)
mes[[i]]$tipo <- "Hombres"
}
for (i in 23:33){
mes[[i]] <- read.csv(paste("./MES/", i+1980,"M.csv",sep=""),sep=",", header= TRUE,stringsAsFactors=TRUE)
mes[[i]]$ano <- as.numeric(1980+i)
mes[[i]]$tipo <- "Mujeres"
}
for(i in 1:33){
names(mes[[i]]) <- c("Estado", "Total", "Ene", "Feb", "Mar", "Abr", "May", "Jun", "Jul", "Ago", "Sep", "Oct", "Nov", "Dic", "Ano", "Tipo")
}
mes <- ldply(mes, data.frame)
sum(which(is.na(mes)))
```
```{r Limpieza}
unique(mes$Estado)
grep("BajaCalifornia",mes$Estado, value=TRUE)
mes$Estado <- gsub("[ ]{1,}$","",mes$Estado)
mes$Estado <- gsub(".*M.x.*","Mexico",mes$Estado)
mes$Estado <- gsub(".*Mich.*","Michoacan",mes$Estado)
mes$Estado <- gsub(".*San.*","SanLuisPotosi",mes$Estado)
mes$Estado <- gsub(".*Nue.*","NuevoLeon",mes$Estado)
mes$Estado <- gsub(".*Yuc.*","Yucatan",mes$Estado)
mes$Estado <- gsub(".*Quer.*","Queretaro",mes$Estado)
mes$Estado <- gsub(".*Tot.*|.*TOT.*","Total",mes$Estado)
mes$Estado <- gsub(".*Su.*","BajaCaliforniaSur",mes$Estado)
mes$Estado <- gsub(".*xico","Mexico",mes$Estado)
mes$Estado <- as.factor(mes$Estado)
mes$Estado <- ordered(mes$Estado)
mes$Ano <- as.factor(mes$Ano)
mes$Ano <- ordered(mes$Ano)
mes$Tipo <- as.factor(mes$Tipo)
mes$Tipo <- ordered(mes$Tipo)
write.csv(mes, file="Picaduras.csv", row.names=F)
```
```{r Validaciones}
#Numero de NA's
sum(is.na(mes))
#Completitud
mean(is.na(mes))
#Faltantes por variable
sapply(mes, function(x) {mean(is.na(x))})
#Número de registros duplicados
sum(duplicated(mes))
#Proporción de registros duplicado
mean(duplicated(mes))
#Validación de que Masculino+Femenino=General
tipo <- aggregate(.~ Tipo,data=mes, sum)
for (i in 3:15){
tipo[4,i] <- tipo[1,i]-tipo[2,i]-tipo[3,i]
}
tipo
#Validacion de suma de fuentes =Total
general <- 0
hombres <- 0
mujeres <- 0
for(i in 4:15){
general <- general+tipo[1,i]
hombres <- hombres+tipo[2,i]
mujeres <- mujeres+tipo[3,i]
}
tipo$total.sumado <- 0
tipo[1,17] <- general
tipo[2,17] <- hombres
tipo[3,17] <- mujeres
tipo$diferencia.totales <- 0
tipo[1,18]=tipo[1,17]-tipo[1,3]
tipo[2,18]=tipo[2,17]-tipo[2,3]
tipo[3,18]=tipo[3,17]-tipo[3,3]
tipo[c(1,2,3),c(12,14,15)]
#Vemos que las diferencias en ambas validaciones son 0's, por lo que la información es verídica. La prueba de rangos indica que igual estan estructurados de manera correcta, ninguna fuente proporcionó mas datos que el total reportado
```
```{r Gráficas y Organización}
library(ggplot2)
library(ggthemes)
library(reshape2)
mes1 <- melt(data = mes, variable = "Mes", id = c(1,2,15,16))
colnames(mes1)[6] <- "Valor"
mes1 <- mes1[,-2]
mes1 <- subset(mes1, Estado!="Total")
ggplot() + geom_tufteboxplot(data = mes1, mapping = aes(Estado, Valor), outlier.shape = NA) + labs(title = " Picaduras de Alacran de 2003 a 2013", x = "Estado", y = "Picaduras") + ylim(0, 5000) + theme(axis.text.x  = element_text(angle=90, vjust=0.5, size=16))
par(mfrow = c(3,4))
for(i in 3:14){
hist(mes[,i][mes[,16] == "Hombres"])
mes1 <- subset(mes,Estado!="Total")
5
54
6546
4re
mes1 <- subset(mes,Estado!="Total")
mes1 <- melt(data = mes, variable = "Mes", id = c(1,2,15,16))
colnames(mes1)[6] <- "Valor"
mes1 <- mes1[,-2]
mes2 <- subset(mes1, Estado!="Total")
ggplot() + geom_tufteboxplot(data = mes2, mapping = aes(Estado, Valor), outlier.shape = NA) + labs(title = " Picaduras de Alacran de 2003 a 2013", x = "Estado", y = "Picaduras") + ylim(0, 5000) + theme(axis.text.x  = element_text(angle=90, vjust=0.5, size=16))
ggplot() + geom_tufteboxplot(data = mes2, mapping = aes(colour = Estado, Valor), outlier.shape = NA) + labs(title = " Picaduras de Alacran de 2003 a 2013", x = "Estado", y = "Picaduras") + ylim(0, 5000) + theme(axis.text.x  = element_text(angle=90, vjust=0.5, size=16))
ggplot() + geom_tufteboxplot(data = mes2, mapping = aes(Estado, Valor), outlier.shape = NA) + labs(title = " Picaduras de Alacran de 2003 a 2013", x = "Estado", y = "Picaduras") + ylim(0, 5000) + theme(axis.text.x  = element_text(angle=90, vjust=0.5, size=16))
ggplot(mes1, aes(Ano, Valor)) +
geom_line(data = mes1, aes(colour = Mes))
ggplot(mes1, aes(Ano, Valor)) +
geom_line(data = mes1, aes(colour = Mes)) + facet_wrap(~ Mes, ncol = 1) +
labs(title = "Temblores por pais (norte a sur), mayores a 6 grados (ultimos 50 anos)",
x = "Ano",
y = "Magnitud") +
theme_bw()
ggplot(mes1, aes(Ano, Valor)) + geom_line(data = mes1, aes(colour = Mes)) + facet_wrap(~ Mes, ncol = 1) + labs(title = "Temblores por pais (norte a sur), mayores a 6 grados (ultimos 50 anos)", x = "Ano", y = "Magnitud") + theme_bw() + theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.5), strip.text = element_text(face = "bold"), strip.background = element_blank(), panel.border = element_rect(colour = grey(.90)), axis.ticks = element_line(colour=grey(.90), size = .5), axis.text = element_text(colour=grey(.55)), axis.title = element_text(colour=grey(.45)), legend.key = element_blank()) + labs(size = "Profundidad\n(km)", colour = "Pais")
ggplot(mes1, aes(Ano, Valor)) + geom_line(data = mes1, aes(colour = Mes)) + scale_x_datetime(breaks = date_breaks("1 year"), labels = date_format("%Y")) +
ggplot(mes1, aes(Ano, Valor)) + geom_line(data = mes1, aes(colour = Mes)) + scale_x_datetime(breaks = date_breaks("1 year"), labels = date_format("%Y")) + scale_y_continuous(limits = c(6, 9)) + facet_wrap(~ Mes, ncol = 1) + labs(title = "Temblores por pais (norte a sur), mayores a 6 grados (ultimos 50 anos)", x = "Ano", y = "Magnitud") + theme_bw() + theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.5), strip.text = element_text(face = "bold"), strip.background = element_blank(), panel.border = element_rect(colour = grey(.90)), axis.ticks = element_line(colour=grey(.90), size = .5), axis.text = element_text(colour=grey(.55)), axis.title = element_text(colour=grey(.45)), legend.key = element_blank()) + labs(size = "Profundidad\n(km)", colour = "Pais")
ggplot(mes1, aes(Ano, Valor)) + geom_line(data = mes1, aes(colour = Mes)) + guides(colour = FALSE) + facet_wrap(~ Mes, ncol = 1) + labs(title = "Temblores por pais (norte a sur), mayores a 6 grados (ultimos 50 anos)", x = "Ano", y = "Magnitud") + theme_bw() + theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.5), strip.text = element_text(face = "bold"), strip.background = element_blank(), panel.border = element_rect(colour = grey(.90)), axis.ticks = element_line(colour=grey(.90), size = .5), axis.text = element_text(colour=grey(.55)), axis.title = element_text(colour=grey(.45)), legend.key = element_blank()) + labs(size = "Profundidad\n(km)", colour = "Pais")
ggplot(mes1, aes(Ano, Valor)) + geom_line(data = mes1, aes(colour = Mes))  + facet_wrap(~ Mes, ncol = 1) + labs(title = "Temblores por pais (norte a sur), mayores a 6 grados (ultimos 50 anos)", x = "Ano", y = "Magnitud") + theme_bw() + theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.5), strip.text = element_text(face = "bold"), strip.background = element_blank(), panel.border = element_rect(colour = grey(.90)), axis.ticks = element_line(colour=grey(.90), size = .5), axis.text = element_text(colour=grey(.55)), axis.title = element_text(colour=grey(.45)), legend.key = element_blank()) + labs(size = "Profundidad\n(km)", colour = "Pais")
mes3 <- subset(mes2, Estado!="Hombres" & Estado!="Mujeres")
mes3 <- subset(mes2, Tipo!="Hombres" & Tipo!="Mujeres")
4224*3
ggplot(mes3, aes(Ano, Valor)) + geom_line(data = mes1, aes(colour = Mes))  + facet_wrap(~ Mes, ncol = 1) + labs(title = "Temblores por pais (norte a sur), mayores a 6 grados (ultimos 50 anos)", x = "Ano", y = "Magnitud") + theme_bw() + theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.5), strip.text = element_text(face = "bold"), strip.background = element_blank(), panel.border = element_rect(colour = grey(.90)), axis.ticks = element_line(colour=grey(.90), size = .5), axis.text = element_text(colour=grey(.55)), axis.title = element_text(colour=grey(.45)), legend.key = element_blank()) + labs(size = "Profundidad\n(km)", colour = "Pais")
ggplot(mes3, aes(Ano, Valor, group=1)) + geom_line(data = mes1, aes(colour = Mes))  + facet_wrap(~ Mes, ncol = 1) + labs(title = "Temblores por pais (norte a sur), mayores a 6 grados (ultimos 50 anos)", x = "Ano", y = "Magnitud") + theme_bw() + theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.5), strip.text = element_text(face = "bold"), strip.background = element_blank(), panel.border = element_rect(colour = grey(.90)), axis.ticks = element_line(colour=grey(.90), size = .5), axis.text = element_text(colour=grey(.55)), axis.title = element_text(colour=grey(.45)), legend.key = element_blank()) + labs(size = "Profundidad\n(km)", colour = "Pais")
ggplot(mes3, aes(Ano, Valor, group=1)) + geom_line(data = mes1, aes(colour = Mes))  + facet_wrap(~ Mes, ncol = 1) + labs(title = "Temblores por pais (norte a sur), mayores a 6 grados (ultimos 50 anos)", x = "Ano", y = "Magnitud") + theme_bw() + theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.5), strip.text = element_text(face = "bold"), strip.background = element_blank(), panel.border = element_rect(colour = grey(.90)), axis.ticks = element_line(colour=grey(.90), size = .5), axis.text = element_text(colour=grey(.55)), axis.title = element_text(colour=grey(.45)), legend.key = element_blank()) + labs(colour = "Estado")
ggplot(mes3, aes(Ano, Valor, group=1)) + geom_line(data = mes1, aes(colour = Mes))  + facet_wrap(~ Mes, ncol = 1) + labs(title = "Picaduras de Alacran (Poblacion general)", x = "Ano", y = "Piquetes") + theme_bw() + theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.5), strip.text = element_text(face = "bold"), strip.background = element_blank(), panel.border = element_rect(colour = grey(.90)), axis.ticks = element_line(colour=grey(.90), size = .5), axis.text = element_text(colour=grey(.55)), axis.title = element_text(colour=grey(.45)), legend.key = element_blank()) + labs(colour = "Estado")
ggplot(mes3, aes(Ano, Valor)) + geom_line(data = mes1, aes(colour = Mes))  + facet_wrap(~ Mes, ncol = 1) + labs(title = "Picaduras de Alacran (Poblacion general)", x = "Ano", y = "Piquetes") + theme_bw() + theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.5), strip.text = element_text(face = "bold"), strip.background = element_blank(), panel.border = element_rect(colour = grey(.90)), axis.ticks = element_line(colour=grey(.90), size = .5), axis.text = element_text(colour=grey(.55)), axis.title = element_text(colour=grey(.45)), legend.key = element_blank()) + labs(colour = "Estado")
ggplot(mes3, aes(Ano, Valor, group=1)) + geom_line(data = mes1, aes(colour = Mes))  + facet_wrap(~ Mes, ncol = 1) + labs(title = "Picaduras de Alacran (Poblacion general)", x = "Ano", y = "Piquetes") + theme_bw() + theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.5), strip.text = element_text(face = "bold"), strip.background = element_blank(), panel.border = element_rect(colour = grey(.90)), axis.ticks = element_line(colour=grey(.90), size = .5), axis.text = element_text(colour=grey(.55)), axis.title = element_text(colour=grey(.45)), legend.key = element_blank()) + labs(colour = "Estado")
tipo
head(mes)
head(mes1)
mes1 <- melt(data = mes, variable = "Mes", id = c(1,2,15,16))
head(mes1)
mes3 <- subset(mes, Tipo=="General", Estado != "Total")
head(mes3)
363*3
mes3 <- subset(mes, Tipo = "General", Estado != "Total")
mes3 <- subset(mes, Tipo == "General", Estado != "Total")
363-33
mes3 <- subset(mes, Estado != "Total")
mes3 <- subset(mes, Estado != "Total", Estado == "General")
mes3 <- subset(mes, Estado != "Total", Tipo == "General")
mes3 <- subset(mes, Estado != "Total", Tipo == "General")
head(mes3)
mes3 <- subset(mes, Estado != "Total", Tipo == "General")
ggplot(mes3, aes(Ano, Valor)) + geom_line(data = mes1, aes(colour = Mes))  + facet_wrap(~ Mes, ncol = 1) + labs(title = "Picaduras de Alacran (Poblacion general)", x = "Ano", y = "Piquetes") + theme_bw() + theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.5), strip.text = element_text(face = "bold"), strip.background = element_blank(), panel.border = element_rect(colour = grey(.90)), axis.ticks = element_line(colour=grey(.90), size = .5), axis.text = element_text(colour=grey(.55)), axis.title = element_text(colour=grey(.45)), legend.key = element_blank()) + labs(colour = "Estado")
mes3 <- subset(mes3, Estado != "Total", Tipo == "General")
mes1 <- melt(data = mes, variable = "Mes", id = c(1,2,15,16))
colnames(mes1)[6] <- "Valor"
mes1 <- mes1[,-2]
mes2 <- subset(mes1, Estado!="Total")
#Gráfica de Tufte
ggplot() + geom_tufteboxplot(data = mes2, mapping = aes(Estado, Valor), outlier.shape = NA) + labs(title = " Picaduras de Alacran de 2003 a 2013", x = "Estado", y = "Picaduras") + ylim(0, 5000) + theme(axis.text.x  = element_text(angle=90, vjust=0.5, size=16))
mes3 <- subset(mes3, Estado != "Total", Tipo == "General")
ggplot(mes3, aes(Ano, Valor)) + geom_line(data = mes1, aes(colour = Mes))  + facet_wrap(~ Mes, ncol = 1) + labs(title = "Picaduras de Alacran (Poblacion general)", x = "Ano", y = "Piquetes") + theme_bw() + theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.5), strip.text = element_text(face = "bold"), strip.background = element_blank(), panel.border = element_rect(colour = grey(.90)), axis.ticks = element_line(colour=grey(.90), size = .5), axis.text = element_text(colour=grey(.55)), axis.title = element_text(colour=grey(.45)), legend.key = element_blank()) + labs(colour = "Estado")
